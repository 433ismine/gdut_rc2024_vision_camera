// Generated by gencpp from file yolov5_ros/Judge.msg
// DO NOT EDIT!


#ifndef YOLOV5_ROS_MESSAGE_JUDGE_H
#define YOLOV5_ROS_MESSAGE_JUDGE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace yolov5_ros
{
template <class ContainerAllocator>
struct Judge_
{
  typedef Judge_<ContainerAllocator> Type;

  Judge_()
    : header()
    , name()
    , p(0.0)
    , d(0.0)  {
    }
  Judge_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , name(_alloc)
    , p(0.0)
    , d(0.0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _name_type;
  _name_type name;

   typedef double _p_type;
  _p_type p;

   typedef double _d_type;
  _d_type d;





  typedef boost::shared_ptr< ::yolov5_ros::Judge_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::yolov5_ros::Judge_<ContainerAllocator> const> ConstPtr;

}; // struct Judge_

typedef ::yolov5_ros::Judge_<std::allocator<void> > Judge;

typedef boost::shared_ptr< ::yolov5_ros::Judge > JudgePtr;
typedef boost::shared_ptr< ::yolov5_ros::Judge const> JudgeConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::yolov5_ros::Judge_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::yolov5_ros::Judge_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::yolov5_ros::Judge_<ContainerAllocator1> & lhs, const ::yolov5_ros::Judge_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.name == rhs.name &&
    lhs.p == rhs.p &&
    lhs.d == rhs.d;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::yolov5_ros::Judge_<ContainerAllocator1> & lhs, const ::yolov5_ros::Judge_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace yolov5_ros

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::yolov5_ros::Judge_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::yolov5_ros::Judge_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::yolov5_ros::Judge_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::yolov5_ros::Judge_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::yolov5_ros::Judge_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::yolov5_ros::Judge_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::yolov5_ros::Judge_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f68a813e34e64cb0e27e4aabdaed743e";
  }

  static const char* value(const ::yolov5_ros::Judge_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf68a813e34e64cb0ULL;
  static const uint64_t static_value2 = 0xe27e4aabdaed743eULL;
};

template<class ContainerAllocator>
struct DataType< ::yolov5_ros::Judge_<ContainerAllocator> >
{
  static const char* value()
  {
    return "yolov5_ros/Judge";
  }

  static const char* value(const ::yolov5_ros::Judge_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::yolov5_ros::Judge_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"string name\n"
"float64 p\n"
"float64 d\n"
"\n"
"\n"
"\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::yolov5_ros::Judge_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::yolov5_ros::Judge_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.name);
      stream.next(m.p);
      stream.next(m.d);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Judge_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::yolov5_ros::Judge_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::yolov5_ros::Judge_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.name);
    s << indent << "p: ";
    Printer<double>::stream(s, indent + "  ", v.p);
    s << indent << "d: ";
    Printer<double>::stream(s, indent + "  ", v.d);
  }
};

} // namespace message_operations
} // namespace ros

#endif // YOLOV5_ROS_MESSAGE_JUDGE_H
